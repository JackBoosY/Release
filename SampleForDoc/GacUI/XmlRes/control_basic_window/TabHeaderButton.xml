<Instance ref.CodeBehind="false" ref.Class="sample::TabWindowTabHeaderButtonTemplate">
  <ref.Members>
    <![CDATA[
      prop TabFocused: bool = false {}
    ]]>
  </ref.Members>
  <SelectableButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
    <att.TabFocused-bind>(cast (TabPage*) self.Context).OwnerTab.Focused ?? false</att.TabFocused-bind>
    <SolidBackground>
      <att.Color-bind>
        <![CDATA[
          cast Color let state = self.State in (
            self.Selected ? "#007ACC" :
            state == ButtonState::Active ? "#1C97EA" :
            state == ButtonState::Pressed ? "#1C97EA" :
            "#434346"
          )
        ]]>
      </att.Color-bind>
    </SolidBackground>
    <Bounds AlignmentToParent="left:1 top:1 right:1 bottom:1" Visible-bind="self.Selected and self.TabFocused" MinSizeLimitation="LimitToElementAndChildren">
      <FocusRectangle/>
    </Bounds>
    <Bounds AlignmentToParent="left:6 top:3 right:6 bottom:3" MinSizeLimitation="LimitToElementAndChildren">
      <SolidLabel Text-bind="self.Text" Font-bind="self.Font" HorizontalAlignment="Center" VerticalAlignment="Center">
        <att.Color-bind>
          <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#6D6D6D" :
              state == ButtonState::Active ? "#F1F1F1" :
              state == ButtonState::Pressed ? "#FFFFFF" :
              "#F1F1F1"
            )
          ]]>
        </att.Color-bind>
      </SolidLabel>
    </Bounds>
  </SelectableButtonTemplate>
</Instance>